@page "/"
@inject IWorkItemClient _workItemClient
@inject ISequenceClient _sequenceClient

<PageTitle>What Should I Work on Today?</PageTitle>

<div class="row">
    <div class="col">
        <ErrorMessage Error="@_errorMessage" />
        @if (_currentItems is null)
        {
            <Loading />
        }
        else
        {
            <h1 class="text-center display-6">What Should I Work on Today?</h1>
            <p>
                The current sequence number is: @_currentSequenceNumber <br />
            </p>
            <div>
                <button type="button" class="btn btn-primary" @onclick="AdvanceSequence">
                    Advance Sequence
                </button>
                <button type="button" class="btn btn-warning" @onclick="RandomItem">
                    Random Item
                </button>
            </div>

            <div>
                @foreach (var item in _currentItems)
                {
                    <div class="card mt-2">
                        <div class="card-header">
                            Current Item - <span class="text-muted">Last worked: @(item.DateWorkedOn?.ToShortDateString() ?? "Never")</span>
                        </div>
                        <div class="card-body">
                            <a href="view-work-item/@item.WorkItemId">@item.Name</a>
                            <div class="mt-1">@item.Description</div>
                        </div>
                    </div>
                }
            </div>

            @if (_randomItem is not null)
            {
                <div>
                    <div class="card mt-2">
                        <div class="card-header">
                            Random Item - <span class="text-muted">Last worked: @(_randomItem.DateWorkedOn?.ToShortDateString() ?? "Never")</span>
                        </div>
                        <div class="card-body">
                            <a href="view-work-item/@_randomItem.WorkItemId">@_randomItem.Name</a>
                            <div class="mt-1">@_randomItem.Description</div>
                        </div>
                    </div>
                </div>
            }

            <div>
                @foreach (var item in _pins)
                {
                    <div class="card mt-2">
                        <div class="card-header">
                            Pinned Item - <span class="text-muted">Last worked: @(item.DateWorkedOn?.ToShortDateString() ?? "Never")</span>
                        </div>
                        <div class="card-body">
                            <a href="view-work-item/@item.WorkItemId">@item.Name</a>
                            <div class="mt-1">@item.Description</div>
                        </div>
                    </div>
                }
            </div>

            <hr />

            <div class="input-group mb-3 mt-3">
                <input type="text" class="form-control form-control-sm" placeholder="Search" aria-label="Search" aria-describedby="searchBtn" @bind-value="_searchTerm" @onkeyup="CheckForEnter">
                <button class="btn btn-sm btn-info" type="button" id="searchBtn" @onclick="DoSearch">
                    Search
                </button>
                <button class="btn btn-sm btn-warning" type="button" id="searchBtn" @onclick="() => {_searchResults.Clear(); _searchTerm=string.Empty;}">
                    Reset
                </button>
            </div>

            <div>
                @if (_searchResults.Any())
                {
                    @foreach (var item in _searchResults)
                    {
                        <div class="card mt-2">
                            <div class="card-header">
                                Search Result - <span class="text-muted">Last worked: @(item.DateWorkedOn?.ToShortDateString() ?? "Never")</span>
                            </div>
                            <div class="card-body">
                                <a href="view-work-item/@item.WorkItemId">@item.Name</a>
                                <div class="mt-1">@item.Description</div>
                            </div>
                        </div>
                    }
                }
            </div>
        }
    </div>
</div>

@code {
    private List<WorkItem>? _currentItems = null;
    private WorkItem? _randomItem = null;
    private int _currentSequenceNumber = 0;
    private string? _errorMessage = null;
    private string _searchTerm = string.Empty;
    private List<WorkItem> _searchResults = new();
    private List<WorkItem> _pins = new();

    private static Random _random = null!;

    protected async override Task OnInitializedAsync()
    {
        if (_random is null)
        {
            _random = new Random();
        }

        await UpdateData();
    }

    private async Task CheckForEnter(KeyboardEventArgs e)
    {
        if(e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await DoSearch();
        }
    }

    private async Task DoSearch()
    {
        try
        {
            _searchResults = await _workItemClient.SearchAsync(_searchTerm);
            _errorMessage = null;
        }
        catch (Exception x)
        {
            _errorMessage = "An error occured while attempting to contact the API";
        }

    }

    private async Task UpdateData()
    {
        try
        {
            _currentSequenceNumber = await _sequenceClient.GetSequenceNumberAsync();
            _currentItems = await _workItemClient.GetBySequenceNumberAsync(_currentSequenceNumber);

            _errorMessage = null;
        }
        catch
        {
            _errorMessage = "An error occured while attempting to contact the API";
        }
        await RandomItem();
        StateHasChanged();
    }

    private async Task AdvanceSequence()
    {
        try
        {
            int maxSeq = await _sequenceClient.GetMaxSeqeunceNumberAsync();

            if (_currentSequenceNumber >= maxSeq)
            {
                _currentSequenceNumber = 1;
            }
            else
            {
                _currentSequenceNumber++;
            }

            _errorMessage = null;
        }
        catch
        {
            _errorMessage = "An error occured while attempting to contact the API";
        }

        await UpdateData();
    }

    private async Task RandomItem()
    {
        try
        {
            var allItems = await _workItemClient.GetAllAsync();
            _randomItem = allItems[_random.Next(allItems.Count)];

            _errorMessage = null;
        }
        catch
        {
            _errorMessage = "An error occured while attempting to contact the API";
        }

    }
}