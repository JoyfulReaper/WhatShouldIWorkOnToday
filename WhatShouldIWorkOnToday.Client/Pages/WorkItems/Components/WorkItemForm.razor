@inject IWorkItemClient _workItemClient

<EditForm Model="_workItem" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control form-control-sm" @bind-Value="_workItem.Name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputText class="form-control form-control-sm" @bind-Value="_workItem.Description" />
    </div>
    <div class="mb-3">
        <label for="WorkItemUrl" class="form-label">Url</label>
        <InputText class="form-control form-control-sm" @bind-Value="_workItem.Url" />
    </div>
    <div>
        <button type="submit" class="btn btn-primary">
            @(WorkItemId == 0 ? "Create" : "Edit")
        </button>
        @if (ShowCancel)
        {
            <button type="button" class="btn btn-warning ms-2" @onclick="async () => await OnCancelClicked.InvokeAsync()">
                Cancel
            </button>
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public int WorkItemId { get; set; }

    [Parameter]
    public bool ShowCancel { get; set; }

    [Parameter]
    public EventCallback<string> OnError { get; set; }

    [Parameter]
    public EventCallback<WorkItem> OnSuccess { get; set; }

    [Parameter]
    public EventCallback OnCancelClicked { get; set; }

    private WorkItem _workItem = new();

    protected override async Task OnParametersSetAsync()
    {
        if (WorkItemId != 0)
        {
            _workItem = await _workItemClient.GetAsync(WorkItemId);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (WorkItemId == 0)
            {
                _workItem = await _workItemClient.CreateAsync(_workItem);
            }
            else
            {
                await _workItemClient.UpdateAsync(_workItem);
            }
        }
        catch (Exception)
        {
            await OnError.InvokeAsync("An error occured while contacting the API");
        }

        await OnSuccess.InvokeAsync(_workItem);
        _workItem = new();
    }
}
