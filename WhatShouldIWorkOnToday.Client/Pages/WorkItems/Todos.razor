@page "/todos/{workItemId:int}"
@inject ITodoItemClient _todoItemClient
@inject IWorkItemClient _workItemClient

<div class="row">
    <div class="col">
        <ErrorMessage Error="@_errorMessage" />

        @if (_todoItems is null)
        {
            <Loading />
        }
        else
        {
            <h3 class="text-center">@_workItem?.Name Todo Items</h3>

            <div class="mb-2">
                <button class="btn btn-warning" onclick="history.back()">
                    Back
                </button>
            </div>

            <div class="mt-2 mb-2">
                <input type="text" class="form-control form-control-sm w-auto" @bind="_todoItem.Task" />
                <button class="btn btn-primary mt-1" @onclick="AddTask">
                    @(_editing ? "Edit Item" : "Add Item")
                </button>
                @if(_editing)
                {
                    <button class="btn btn-warning ms-1 mt-1" type="button" @onclick="() => { _editing = false; _todoItem.Task = string.Empty; }">
                        Cancel
                    </button>
                }
            </div>

            <h4 class="text-center mt-4">Task List</h4>
            <div class="d-flex justify-content-center">
                <table class="table table-sm table-striped table-bordered w-75">
                    <thead>
                        <tr>
                            <th>
                                Task
                            </th>
                            <th>
                                Date Completed
                            </th>
                            <th>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in _todoItems)
                        {
                            <tr>
                                <td>
                                    <span class="@(item.DateCompleted is null ? "" : "text-decoration-line-through")">@item.Task</span>
                                </td>
                                <td>
                                    @item.DateCompleted?.ToShortDateString()
                                </td>
                                <td class="text-center">
                                    @if (item.DateCompleted is null)
                                    {
                                        <button class="btn btn-sm btn-warning" type="button"  @onclick="() => CompleteItem(item.TodoItemId)">
                                            Complete
                                        </button>
                                    }
                                    else
                                    {
                                         <button class="btn btn-sm btn-danger" type="button" @onclick="() => UnCompleteItem(item.TodoItemId)">
                                            Un-Complete
                                        </button>
                                    }
                                    <button class="btn btn-sm btn-outline-warning ms-1" type="button" @onclick="() => Edit(item)">
                                        Edit
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger ms-1" type="button" @onclick="() => Delete(item.TodoItemId)">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int WorkItemId { get; set; }

    private IEnumerable<ToDoItem>? _todoItems = null;
    private string? _errorMessage = null;
    private WorkItem? _workItem;
    private ToDoItem _todoItem = new();

    private bool _editing = false;

    protected async override Task OnParametersSetAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        try
        {
            _todoItems = await _todoItemClient.GetByWorkItemAsync(WorkItemId);
            _workItem = await _workItemClient.GetAsync(WorkItemId);
            _todoItem.WorkItemId = _workItem.WorkItemId;
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = "API Error: " + ex.Message;
        }
    }

    private async Task CompleteItem(int todoItemId)
    {
        try
        {
            await _todoItemClient.CompleteAsync(todoItemId);
            _errorMessage = null;
            await UpdateData();
        }
        catch (Exception ex)
        {
            _errorMessage = "API Error: " + ex.Message;
        }
    }

    private async Task UnCompleteItem(int todoItemId)
    {
        try
        {
            await _todoItemData.UnCompleteAsync(todoItemId);
            _errorMessage = null;
            await UpdateData();
        }
        catch (Exception ex)
        {
            _errorMessage = "API Error: " + ex.Message;
        }
    }

    private async Task AddTask()
    {
        if (string.IsNullOrWhiteSpace(_todoItem.Task))
        {
            _errorMessage = "Empty tasks not allowed";
            return;
        }
        try
        {
            if(_editing)
            {
                await _todoItemData.Edit(_todoItem);
                _todoItem.Task = string.Empty;
                _editing = false;
            }
            else
            {
                await _todoItemClient.CreateAsync(new ToDoItemRequest { Task = _todoItem.Task, WorkItemId = _todoItem.WorkItemId });
                _todoItem.Task = string.Empty;
            }

            _errorMessage = null;

            await UpdateData();
        }
        catch (Exception ex)
        {
            _errorMessage = "API Error: " + ex.Message;
        }
    }

    private void Edit(TodoItem item)
    {
        _editing = true;
        _todoItem.Task = item.Task;
        _todoItem.TodoItemId = item.TodoItemId;
    }

    private async Task Delete(int todoItemId)
    {
        try
        {
            await _todoItemClient.DeleteAsync(todoItemId);
            _errorMessage = null;
            await UpdateData();
        }
        catch (Exception ex)
        {
            _errorMessage = "API Error: " + ex.Message;
        }
    }
}
