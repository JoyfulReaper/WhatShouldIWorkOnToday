@page "/work-items"
@inject HttpClient _http

<PageTitle>WSIWOT: Work Items</PageTitle>

<div class="row">
    <div class="col">
        @if (_workItems is null)
        {
            <span>Loading...</span>
        }
        else
        {
            @foreach (var item in _workItems)
            {
                <div>
                    @item.Name
                </div>
            }
        }
    </div>
    <div class="col">
        @if(_errorMessage is not null)
        {
            <div class="alert alert-danger" role="alert">
                @_errorMessage
            </div>
        }
        
        <h1 class="display-6">New Work Item</h1>
        <EditForm Model="_newWorkItem" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText class="form-control form-control-sm" @bind-Value="_newWorkItem.Name" />
            </div>
            <div class="mb-3">
                <label class="form-label">Description</label>
                <InputText class="form-control form-control-sm" @bind-Value="_newWorkItem.Description"/>
            </div>
            <div class="mb-3">
                <label for="WorkItemUrl" class="form-label">Url</label>
                <InputText class="form-control form-control-sm" @bind-Value="_newWorkItem.Url" />
            </div>
            <div>
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private List<WorkItem>? _workItems;
    private WorkItem _newWorkItem = new();
    private string? _errorMessage = null;

    protected async override void OnInitialized()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        _workItems = await _http.GetFromJsonAsync<List<WorkItem>>("api/WorkItem");
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        using var response = await _http.PostAsJsonAsync("api/WorkItem", _newWorkItem);
        if(!response.IsSuccessStatusCode)
        {
            _errorMessage = response.ReasonPhrase;
            await UpdateData();
            _newWorkItem = new();
        }
    }
}
