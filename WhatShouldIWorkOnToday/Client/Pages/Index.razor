@page "/"
@inject IWorkItemEndpoint _workItemData
@inject ISequenceNumberEndpoint _sequenceNumberData

<PageTitle>What Should I Work on Today?</PageTitle>

<div class="row">
    <div class="col">
        <ErrorMessage Error="@_errorMessage" />
        @if (_currentItems is null)
        {
            <Loading />
        }
        else
        {
            <h1 class="text-center display-6">What Should I Work on Today?</h1>
            <p>
                The current sequence number is: @_currentSequence?.CurrentSequence <br />
                Set on: @_currentSequence?.DateSet.ToShortDateString()
            </p>
            <div>
                <button type="button" class="btn btn-primary" @onclick="AdvanceSequence">
                    Advance Sequence
                </button>
                <button type="button" class="btn btn-warning" @onclick="RandomItem">
                    Random Item
                </button>
            </div>

            <div>
                @foreach (var item in _currentItems)
                {
                    <div class="card mt-2">
                        <div class="card-body">
                            <a href="view-work-item/@item.WorkItemId">@item.Name</a>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<WorkItem>? _currentItems = null;
    private CurrentSequenceNumber? _currentSequence = null;
    private string? _errorMessage = null;

    private static Random _random = null!;

    protected async override Task OnInitializedAsync()
    {
        if(_random is null)
        {
            _random = new Random();
        }

        await UpdateData();
    }

    private async Task UpdateData()
    {
        try
        {
            _currentItems = await _workItemData.GetCurrent();
            _currentSequence = await _sequenceNumberData.Get();
            _errorMessage = null;
        }
        catch
        {
            _errorMessage = "An error occured while attempting to contact the API";
        }
        StateHasChanged();
    }

    private async Task AdvanceSequence()
    {
        try
        {
            int maxSeq = await _sequenceNumberData.GetMaxSequenceNumber();

            if (_currentSequence.CurrentSequence >= maxSeq)
            {
                _currentSequence.CurrentSequence = 0;
            }
            else
            {
                _currentSequence.CurrentSequence++;
            }

            _currentSequence.DateSet = DateTime.UtcNow;
            await _sequenceNumberData.Put(_currentSequence);

            _errorMessage = null;
        }
        catch
        {
            _errorMessage = "An error occured while attempting to contact the API";
        }

        await UpdateData();
    }

    private async Task RandomItem()
    {
        try
        {
            var allItems = await _workItemData.GetAllAsync();
            _currentItems!.Clear();
            _currentItems!.Add(allItems[_random.Next(allItems.Count)]);

            _errorMessage = null;
        }
        catch
        {
            _errorMessage = "An error occured while attempting to contact the API";
        }

    }
}