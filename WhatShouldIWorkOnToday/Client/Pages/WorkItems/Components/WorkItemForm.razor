@inject IWorkItemEndpoint _workItemData

<h1 class="display-6">New Work Item</h1>
<EditForm Model="_workItem" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control form-control-sm" @bind-Value="_workItem.Name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputText class="form-control form-control-sm" @bind-Value="_workItem.Description" />
    </div>
    <div class="mb-3">
        <label for="WorkItemUrl" class="form-label">Url</label>
        <InputText class="form-control form-control-sm" @bind-Value="_workItem.Url" />
    </div>
    <div>
        <button type="submit" class="btn btn-primary">Create</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int WorkItemId { get; set; }

    [Parameter]
    public EventCallback<string> OnError { get; set; }

    [Parameter]
    public EventCallback<WorkItem> OnSuccess { get; set; }

    private WorkItem _workItem = new();

    private async Task HandleValidSubmit()
    {
        try
        {
            if (WorkItemId == 0)
            {
                _workItem = await _workItemData.PostAsync(_workItem);
            }
            else
            {
                await _workItemData.PutAsync(_workItem);
            }
        }
        catch (Exception)
        {
            await OnError.InvokeAsync("An error occured while contacting the API");
        }

        await OnSuccess.InvokeAsync(_workItem);
        _workItem = new();
    }
}
