@page "/work-sequence"
@inject IWorkItemSequenceEndpoint _workItemSequenceData

<PageTitle>WSIWOT: Set Work Item Sequeunce</PageTitle>

<div class="col">
    <div class="row">
        <ErrorMessage Error="@_errorMessage" />
        @if (_workSequence is null)
        {
            <Loading />
        }
        else
        {
            <p>
                Set the sequence number for each work item. Multiple items can have the same sequeunce number. If an item has a sequence number less than one then it will only show up
                when the 'Random Item' button is pressed on the Home page.
            </p>

            <table class="table table-striped table-sm table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Sequence</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in _workSequence)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>
                                <input class="form-control form-control-sm" type="number" value="@item.SequenceNumber"
                               @onchange="(e) => UpdateSequenceNumber(e, item)">
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<WorkItemSequence>? _workSequence;
    private string? _errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        _workSequence = await _workItemSequenceData.GetAllWorkItemSequenceAsync();
        StateHasChanged();
    }

    private async Task UpdateSequenceNumber(ChangeEventArgs e, WorkItemSequence wis)
    {
        var seqNum = int.Parse((e.Value as string)!);

        try
        {
            if (wis.WorkSequenceNumberId is null)
            {
                var index = _workSequence.IndexOf(wis);

                var wisResposne = await _workItemSequenceData.PostAsync(new WorkSequenceNumber
                    {
                        WorkItemId = wis.WorkItemId,
                        WorkSequenceNumberId = wis.WorkSequenceNumberId,
                        SequenceNumber = seqNum,
                    });

                //_workSequence[index] = await _workItemSequenceData.GetWorkItemSequenceAsync(wisResposne.WorkSequenceNumberId.Value);
                _workSequence[index].WorkSequenceNumberId = wisResposne.WorkSequenceNumberId;
                _workSequence[index].SequenceNumber = wisResposne.SequenceNumber;
                _workSequence[index].WorkItemId = wisResposne.WorkItemId;
            }
            else
            {
                await _workItemSequenceData.PutAsync(new WorkSequenceNumber
                    {
                        WorkItemId = wis.WorkItemId,
                        WorkSequenceNumberId = wis.WorkSequenceNumberId,
                        SequenceNumber = seqNum,
                    });
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "An error occured while attempting to contact the API.";
        }

    }
}